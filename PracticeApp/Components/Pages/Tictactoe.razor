@page "/tictactoe"
@rendermode InteractiveServer

<h3>Tic Tac Toe</h3>

<p>Rules:</p>
<ul>
    <li>Each player takes turns placing an X or an O on the field.</li>
    <li>The game continues until a player successfully forms a line of three marks in a row.</li>
    <li>Lines can be horizontal, vertical, or diagonal.</li>
    <li>If all squares are filled without a winner, it’s a draw.</li>
</ul>

<div class="ttt-board">
    @for (int i = 0; i < 9; i++)
    {
        var index = i;
        <button class="ttt-button" @onclick="() => SetMarking(index)">
            @cells[index]
        </button>
    }
</div>

<p>Current player: @currentPlayer</p>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <p><strong>@statusMessage</strong></p>
}

<button class="ttt-reset" @onclick="ResetGame">Reset Game</button>

@code {
    private string[] cells = new string[9];
    private string currentPlayer = "X";
    private bool gameOver = false;
    private string statusMessage = string.Empty;

    private void SetMarking(int index)
    {
        if (gameOver)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(cells[index]))
        {
            cells[index] = currentPlayer;

            CheckWinner();

            if (!gameOver)
            {
                currentPlayer = currentPlayer == "X" ? "O" : "X";
            }
        }
    }

    private void CheckWinner()
    {
        int[][] wins = new int[][]
        {
            new[] { 0, 1, 2 }, 
            new[] { 3, 4, 5 }, 
            new[] { 6, 7, 8 }, 
            new[] { 0, 3, 6 }, 
            new[] { 1, 4, 7 }, 
            new[] { 2, 5, 8 }, 
            new[] { 0, 4, 8 }, 
            new[] { 2, 4, 6 } 
        };

        foreach (var combo in wins)
        {
            var a = combo[0];
            var b = combo[1];
            var c = combo[2];

            if (!string.IsNullOrWhiteSpace(cells[a]) &&
                cells[a] == cells[b] &&
                cells[b] == cells[c])
            {
                statusMessage = $"Player {currentPlayer} wins!";
                gameOver = true;
                return;
            }
        }

        bool boardFull = true;
        for (int i = 0; i < cells.Length; i++)
        {
            if (string.IsNullOrWhiteSpace(cells[i]))
            {
                boardFull = false;
                break;
            }
        }

        if (boardFull)
        {
            statusMessage = "Draw!";
            gameOver = true;
        }
    }

    private void ResetGame()
    {
        cells = new string[9];
        currentPlayer = "X";
        gameOver = false;
        statusMessage = string.Empty;
    }
}